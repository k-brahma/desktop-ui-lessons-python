"""
PySide6 学習サンプルコレクション

このパッケージは、PySide6の各種APIクラスの学習を段階的に進めるためのサンプルコード集です。
各サブパッケージには、対応するAPIクラスの基本から高度な使用方法まで、
実践的なサンプルコードが含まれています。

推奨学習順序:
===========

## 第1段階: 基礎フレームワーク
1. qapplication/    - アプリケーションの基本構造とライフサイクル
2. qwidget/         - すべてのUIコンポーネントの基底クラス

## 第2段階: ウィンドウとレイアウト
3. qmainwindow/     - メインウィンドウ、メニュー、ツールバー
4. qvboxlayout/     - 縦方向レイアウト管理（最も基本的なレイアウト）

## 第3段階: 基本UIコンポーネント
5. qlabel/          - テキスト・画像表示の基本
6. qpushbutton/     - ボタンとイベント処理の基本

## 第4段階: 入力コンポーネント
7. qlineedit/       - テキスト入力フィールドの基本
8. qcheckbox/       - チェックボックスとラジオボタン

## 第5段階: レイアウト拡張
9. qhboxlayout/     - 水平方向レイアウト管理

## 第6段階: 選択コンポーネント
10. qcombobox/      - ドロップダウンリストと選択コンポーネント

## 第7段階: ダイアログ
11. qmessagebox/    - メッセージダイアログとユーザー通知

## 第8段階: コンテナウィジェット
12. qgroupbox/      - グループボックスとウィジェットの整理

## 第9段階: 高度なコンポーネント
13. qtablewidget/   - 表形式データの表示・編集

## 第10段階: スタイリングとカスタマイズ
14. qfont/          - フォント設定とタイポグラフィ
15. qt/             - Qt定数とフラグ（全体で使用される設定値）

学習のガイドライン:
================

### 各段階での学習アプローチ
- 各パッケージの `_01.py` から順番に実行・理解
- コードを実際に動かして動作を確認
- コメントとdocstringを読んで概念を理解
- 小さな変更を加えて実験

### 効果的な学習方法
1. **段階的な理解**: 上記の順序に従って学習することで、依存関係を考慮した効率的な理解が可能
2. **実践的な応用**: 各サンプルを実行し、コードを改変して理解を深める
3. **組み合わせ学習**: 後半では複数のAPIクラスを組み合わせた実装を試す

### サンプルファイルの命名規則
- `{classname}_01.py`: 基本的な使用方法
- `{classname}_02.py`: 高度な機能・実践的な例

Prerequisites:
=============
- Python 3.8+
- PySide6 (`pip install PySide6`)
- 基本的なPythonのオブジェクト指向プログラミングの理解

Authors: PySide6 Learning Team
Date: 2024
License: MIT
"""

# パッケージのメタデータ
__version__ = "1.0.0"
__author__ = "PySide6 Learning Team"
__description__ = "PySide6 学習用サンプルコード集"

# 学習順序を定義した定数
LEARNING_ORDER = [
    "qapplication",   # アプリケーション基盤
    "qwidget",        # ウィジェット基底クラス
    "qmainwindow",    # メインウィンドウ
    "qvboxlayout",    # 縦方向レイアウト管理
    "qlabel",         # 基本表示コンポーネント
    "qpushbutton",    # 基本入力コンポーネント
    "qlineedit",      # テキスト入力フィールド
    "qcheckbox",      # チェックボックス・ラジオボタン
    "qhboxlayout",    # 水平方向レイアウト管理
    "qcombobox",      # ドロップダウン・選択コンポーネント
    "qmessagebox",    # メッセージダイアログ
    "qgroupbox",      # グループボックス・コンテナ
    "qtablewidget",   # 高度な表示・編集コンポーネント
    "qfont",          # スタイリング
    "qt"              # 定数・フラグ
]

# 各パッケージの学習目標
LEARNING_OBJECTIVES = {
    "qapplication": [
        "PySide6アプリケーションの基本構造の理解",
        "イベントループとアプリケーションライフサイクル",
        "適切なリソース管理と終了処理"
    ],
    "qwidget": [
        "ウィジェットの基本概念と階層構造",
        "ウィンドウプロパティと表示制御",
        "イベント処理とシグナル・スロット"
    ],
    "qmainwindow": [
        "アプリケーションウィンドウの構築",
        "メニューバーとツールバーの実装",
        "ステータスバーと中央ウィジェット"
    ],
    "qvboxlayout": [
        "レイアウト管理の基本概念",
        "ウィジェットの自動配置と調整",
        "ストレッチとマージンの活用"
    ],
    "qlabel": [
        "テキストと画像の表示",
        "フォント設定とスタイリング",
        "配置とインタラクション"
    ],
    "qpushbutton": [
        "ボタンの作成とカスタマイズ",
        "クリックイベントとシグナル処理",
        "状態管理とユーザーフィードバック"
    ],
    "qlineedit": [
        "テキスト入力フィールドの基本操作",
        "入力検証とフォーマット設定",
        "プレースホルダーとマスク機能"
    ],
    "qcheckbox": [
        "チェックボックスの基本操作",
        "ラジオボタンとグループ管理",
        "状態変更イベントの処理"
    ],
    "qhboxlayout": [
        "水平方向レイアウトの基本",
        "ウィジェット配置とスペーシング",
        "垂直レイアウトとの組み合わせ"
    ],
    "qcombobox": [
        "ドロップダウンリストの作成",
        "アイテム管理と選択処理",
        "編集可能コンボボックス"
    ],
    "qmessagebox": [
        "メッセージダイアログの基本",
        "ユーザー確認とエラー表示",
        "カスタムダイアログの作成"
    ],
    "qgroupbox": [
        "グループボックスによる整理",
        "ウィジェットのグループ化",
        "視覚的な構造化とレイアウト"
    ],
    "qtablewidget": [
        "表形式データの表示と編集",
        "セル操作とデータバインディング",
        "実用的なデータ管理アプリケーション"
    ],
    "qfont": [
        "フォント設定とタイポグラフィ",
        "テキストレンダリングの制御",
        "アプリケーション全体のスタイル統一"
    ],
    "qt": [
        "Qt定数とフラグの理解",
        "アライメント、キーボード、マウス設定",
        "クロスプラットフォーム対応"
    ]
}


def get_learning_path():
    """
    推奨学習パスを返す
    
    Returns:
        list: 学習順序のリスト
    """
    return LEARNING_ORDER.copy()


def get_objectives(package_name):
    """
    指定パッケージの学習目標を返す
    
    Args:
        package_name (str): パッケージ名
        
    Returns:
        list: 学習目標のリスト
    """
    return LEARNING_OBJECTIVES.get(package_name, [])
